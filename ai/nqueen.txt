 
package n_queen;

 import java.util.Scanner;

 /* Java program to solve N Queen Problem using backtracking */
 public class N_queen {

 int N;
 N_queen(int a)
 {
 N = a;
 }
 /* A utility function to print solution */
 void printSolution(int board[][]) {
 for (int i = 0; i < N; i++) {
 for (int j = 0; j < N; j++) {
 System.out.print(" " + board[i][j]+ " ");
 }
 System.out.println();
 }
 }
 /* A utility function to check if a queen can
 be placed on board[row][col]. Note that this
 function is called when "col" queens are already
 placeed in columns from 0 to col −1. So we need
 to check only left side for attacking queens */
 boolean isSafe(int grid[][], int row, int col) {
 int i, j;

 /* Check this row on left side */
 for (i = 0; i < col; i++) {
 if (grid[row][i] == 1) {
 return false;
 }
 }

 /* Check upper diagonal on left side */
 for (i = row, j = col; i >= 0 && j >= 0; i−−, j−−) {
 if (grid[i][j] == 1) {
 return false;
 }
 }
 /* Check lower diagonal on left side */
 for (i = row, j = col; j >= 0 && i < N; i++, j−−) {
 if (grid[i][j] == 1) {
 return false;
 }
 }
 return true;
 }

 /* A recursive utility function to solve N Queen problem */
 boolean solveNQUtil(int grid[][], int col) {
 /* base case: If all queens are placed then return true */
 if (col >= N) {
 return true;
 }

 /* Consider this column and try placing this queen in all rows one by

one */
 for (int i = 0; i < N; i++) {
 /* Check if the queen can be placed on board[i][col] */
 if (isSafe(grid, i, col)) {
 /* Place this queen in board[i][col] */
 grid[i][col] = 1;
 /* recur to place rest of the queens */
 if (solveNQUtil(grid, col + 1) == true) {
 return true;
 }
 /* If placing queen in board[i][col] doesn’t lead to a solution

then remove queen from board[i][col] */
 grid[i][col] = 0; // BACKTRACK
 }
 }
 /* If the queen can not be placed in any row in this colum col, then

return false */
 return false;
 }

 boolean solveNQ() {
 int grid[][] = new int[N][N]; // create N*N grid and initialized to 0
 if (solveNQUtil(grid, 0) == false) {
 System.out.print("Solution does not exist for "+N+" queens");
 return false;
 }
 System.out.println("Solution found for "+N+" queens");
 printSolution(grid);
 return true;
 }

 public static void main(String args[]) {
 int n;
 Scanner sc = new Scanner(System.in);
 System.out.println("Number of queen to place − ");
 n = sc.nextInt();
 N_queen Queen = new N_queen(n);
 Queen.solveNQ();
 }
 }
